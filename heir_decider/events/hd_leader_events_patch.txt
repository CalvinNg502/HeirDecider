# ####################################
# # Heir Selection Leader Events Override
# # Author: WhenYouWalkin
# ####################################

#Deprecated; instead of only doing the reroll for no preference, we instead allow the reroll to happen, but alter the weights so that only the preferential class can win. Keeping this file here in case it is need in a later version

# namespace = leader

# # New heir appointed; very similar to vanilla, but adjust the class randomiser so it only fires if heir policy is set to none
# leader_event = {
# 	id = leader.200
# 	hide_window = yes
# 	is_triggered_only = yes

# 	trigger = {
# 		exists = owner
# 	}

# 	immediate = {
# 		# Set age to be younger than normal.
# 		set_variable_to_random_value = {
# 			which = heir_age_mod
# 			min = -10
# 			max = 0
# 			rounded = yes
# 		}
# 		add_age = heir_age_mod

# 		####################
# 		# CLASS RANDOMISER #
# 		####################

# 		# Set skill level to 1
# 		set_skill = 1
# 		# Add generic level modifiers
# 		add_skill_without_trait_selection = owner.modifier:leader_initial_skill

# 		if = {
# 			limit = {
# 				owner = {
# 					OR = {
# 						# Commander
# 						has_valid_civic = civic_crusader_spirit_corporate
# 						has_tradition = tr_supremacy_war_games
# 						has_valid_civic = civic_distinguished_admiralty
# 						has_valid_civic = civic_crusader_spirit
# 						# Official
# 						has_valid_civic = civic_aristocratic_elite
# 						has_tradition = tr_domination_colonial_viceroys
# 						# Scientist
# 						has_valid_civic = civic_technocracy
# 						has_tradition = tr_discovery_science_division
# 						# Current Ruler's Class
# 						has_valid_civic = civic_philosopher_king
# 					}
# 					# only randomize if heir preference is none
# 					has_policy_flag = heir_type_none
# 				}
# 			}

# 			# All classes have a base weight of 10.
# 			# Civics that boost only one class add 40.
# 			# Civics that boost two classes add 20 to each class.
# 			# Traditions that boost a class add 20.

# 			random_list = {
# 				# Commander
# 				0 = {
# 					modifier = {
# 						add = value:heir_class_weight_commander
# 					}
# 					change_leader_class = commander
# 					add_skill_without_trait_selection = owner.modifier:commander_initial_skill
# 				}
# 				# Official
# 				0 = {
# 					modifier = {
# 						add = value:heir_class_weight_official
# 					}
# 					change_leader_class = official
# 					add_skill_without_trait_selection = owner.modifier:official_initial_skill
# 				}
# 				# Scientist
# 				0 = {
# 					modifier = {
# 						add = value:heir_class_weight_scientist
# 					}
# 					change_leader_class = scientist
# 					add_skill_without_trait_selection = owner.modifier:scientist_initial_skill
# 				}
# 			}
# 		}

# 		##########
# 		# TRAITS #
# 		##########

# 		# Initial Traits, set after determining class.
# 		add_trait_no_notify = trait_imperial_heir
# 		add_trait_no_notify = "random_common"

# 		# Chance for a negative trait.
# 		random_list = {
# 			95 = { }
# 			5 = {
# 				add_trait_no_notify = "random_common"
# 				add_trait_no_notify = "random_negative"
# 				# Variable "leader_pending_negative_traits_unmodified" doesn't exist yet, can't reduce it yet. Checked now made in paragon_2.2200.
# 				modifier = {
# 					factor = 0
# 					owner = { has_valid_civic = civic_philosopher_king }
# 				}
# 			}
# 		}

# 		# Champions of the Empire
# 		# Adds a random common trait
# 		if = {
# 			limit = {
# 				owner = {
# 					has_tradition = tr_aptitude_champions_of_the_empire
# 				}
# 			}
# 			add_trait_no_notify = "random_common"
# 		}

# 		# Optimized Neurology
# 		# Adds a random common trait
# 		if = {
# 			limit = {
# 				owner = {
# 					has_country_flag = genetic_ascension_stage_1_purity
# 					has_genetic_stage_1_tradition = yes
# 				}
# 			}
# 			add_trait = "random_common"
# 		}

# 		# Under One Rule
# 		if = {
# 			limit = {
# 				owner = {
# 					OR = {
# 						has_origin = origin_legendary_leader_imperial
# 						ruler = { has_trait = leader_trait_legendary_offspring }
# 					}
# 				}
# 			}
# 			add_trait_no_notify = leader_trait_legendary_offspring
# 		}

# 		# Technocracy
# 		if = {
# 			limit = {
# 				owner = {
# 					has_valid_civic = civic_technocracy
# 				}
# 				leader_class = scientist
# 			}
# 			add_random_expertise_trait_effect = yes
# 		}
# 		# Crusader Spirit
# 		if = {
# 			limit = {
# 				owner = {
# 					has_valid_civic = civic_crusader_spirit
# 				}
# 				leader_class = commander
# 			}
# 			give_trait_no_notify_ignore_autocracy_restriction = {
# 				TRAIT = leader_trait_crusader
# 			}
# 		}

# 		# Letters of Marque
# 		if = {
# 			limit = {
# 				owner = {
# 					has_valid_civic = civic_crusader_spirit_corporate
# 				}
# 				leader_class = commander
# 			}
# 			give_trait_no_notify_ignore_autocracy_restriction = {
# 				TRAIT = leader_trait_corsair
# 			}
# 		}

# 		# Storm Chasers
# 		# Adds the Storm Rider trait
# 		if = {
# 			limit = {
# 				owner = {
# 					has_origin = origin_storm_chasers
# 				}
# 			}
# 			switch = {
# 				trigger = leader_class
# 				commander = {
# 					add_trait_no_notify = leader_trait_storm_rider_commander
# 				}
# 				scientist = {
# 					add_trait_no_notify = leader_trait_storm_rider_scientist
# 				}
# 				official = {
# 					add_trait_no_notify = leader_trait_storm_rider_official
# 				}
# 			}
# 		}

# 		# Treasure Hunters
# 		if = {
# 			limit = {
# 				owner = {
# 					has_origin = origin_treasure_hunters
# 				}
# 			}
# 			give_trait_no_notify_ignore_autocracy_restriction = {
# 				TRAIT = leader_trait_adventurous_spirit_3
# 			}
# 		}

# 		# Biochemical Composure/Cloning Authorities
# 		if = {
# 			limit = {
# 				leader_can_have_backup_clone = yes
# 			}
# 			random_list = {
# 				75 = {
# 					# Base 75% chance of nothing
# 					modifier = {
# 						factor = 0
# 						root = {
# 							is_cloning_authority = yes
# 							has_cloning_biochemical_composure_tradition = yes
# 						}
# 					}
# 				}
# 				25 = {
# 					add_trait_no_notify = leader_trait_has_backup_clone
# 				}
# 			}
# 		}
# 	}
# }